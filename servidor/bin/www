#!/usr/bin/env node
const { Server } = require('socket.io');
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('whatraf:server');
var http = require('http');
const { count } = require('console');

//Para las imagenes
const express = require('express');
const expressApp = express();
const path = require('path');


/*expressApp.use(express.static(path.join(__dirname, 'public')));
expressApp.use('/fotos', express.static(path.join(__dirname, 'public', 'fotos')));
*/
expressApp.use(express.static(path.join(__dirname, 'public')));
expressApp.use('/fotos', express.static(path.join(__dirname, 'public', 'fotos')));


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); //RENDER_EXTERNAL_URL
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = new Server(server, {
  cors: {
    origin: "https://whatraf.onrender.com"
  }
});



io.listen(4000);
var usuarios= [];
var rooms = []

const enviarUsuariosConectados = () => {
  io.emit('usuariosConectados', usuarios);
};

const intervaloUsuariosConectados = setInterval(enviarUsuariosConectados, 3000);


io.on('connection', (socket) => {


  socket.on('error', (error) => {
    console.error('Error en el socket:', error);
  });

  socket.on('newNameAndPic', (data) => {
    //meto en usuarios el nombre, la foto y el socket
    usuarios.push({nombre: data.nombre, foto: data.foto, socketId: socket.id});
    io.emit('usuariosConectados', usuarios);
    socket.broadcast.emit('usuarioConectado', data.nombre);
    console.log(usuarios.length);
  });

  socket.on('escribiendo', (data) => {
    socket.to(data.receptor).emit('meEscriben', data.emisor);
  });

  socket.on('mensajeTo', (data) => {
    socket.to(data.id).emit('mensaje', {mensaje: data.mensaje, emisor: data.emisor, receptor: data.id});
  });

  socket.on('creaSala', (nombreSala) => {
    socket.join(nombreSala);
    rooms.push(io.sockets.adapter.rooms);
    io.emit('rooms', rooms);
    console.log(rooms);
  });

  socket.on('mensajeGloval', (data) => {
    console.log('mensaje global');
    io.emit('getMensajeGlobal', {mensaje: data.mensaje, emisor: data.emisor});
  });


  socket.on('disconnect', () => {
    const usuarioEncontrado = usuarios.find(usuario => usuario.socketId === socket.id);
    if (usuarioEncontrado) {
      nombreUsuario = usuarioEncontrado.nombre;
      socket.broadcast.emit('usuarioDesconectado', nombreUsuario);
    }
    usuarios = usuarios.filter(usuario => usuario.socketId !== socket.id);
    io.emit('usuariosConectados', usuarios);
    console.log('usuario desconectado');
    
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
